const handleGenerateTestSteps = async () => {
  const url = new URL("http://127.0.0.1:8000/generate-test-steps-from-tc/");

  // ✅ Construct all query parameters
  const params = {
    test_case_id: selectedTestCaseId, // ✅ passed as prop from parent
    user_story_id: selectedUserStoryId,
    project_id: selectedProjectId,
    release_id: selectedReleaseId,
    llm_model_id: selectedLLMModelId,
  };

  if (selectedPromptId) {
    params.prompt_id = selectedPromptId;
  }

  const urlParams = new URLSearchParams();

  // Append multi-select page object IDs
  pageObjectIds.forEach((id) => {
    urlParams.append("page_object_id", id);
  });

  // Append all query params
  Object.entries(params).forEach(([key, val]) => {
    urlParams.append(key, val);
  });

  try {
    const response = await fetch(`${url.toString()}?${urlParams.toString()}`, {
      method: "GET",
      headers: {
        "x-user-soeid": userSoeid,
      },
    });

    const contentType = response.headers.get("content-type");
    const data = contentType?.includes("application/json")
      ? await response.json()
      : await response.text();

    if (!response.ok) {
      console.error("❌ Error generating test steps:", data);
      setShowErrorMessage(true);
      setErrorMessage("Failed to generate test steps");
      setErrorDetails(data?.message || "Something went wrong.");
    } else {
      console.log("✅ Test steps generated:", data);
      // Optional: refresh test step table or show success toast
    }
  } catch (err) {
    console.error("❌ Network error:", err);
    setShowErrorMessage(true);
    setErrorMessage("Failed to connect");
    setErrorDetails(err.message);
  }
};
